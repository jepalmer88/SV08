[gcode_macro heating_bed_indicator]
# turn on RED using a variable PWM between 0-255, turn off all other LED colors
gcode:
        DUMP_VARIABLES
        RESPOND TYPE=command MSG='temp_contrl.cfg heating_bed_indicator  BRIGHTNESS: {params.LED_BRIGHTNESS|float / 255}'
        {% set target = (params.LED_BRIGHTNESS|float / 255) * 25 + 51 %}
        {% for i in range(51, 75) %}
            {% if i < target %}
                SET_LED LED=ccs_rgb RED={params.LED_BRIGHTNESS|float / 255} GREEN=0 BLUE=0 INDEX={i} TRANSMIT=0
            {% else %}
                SET_LED LED=ccs_rgb RED=0 GREEN=0 BLUE=0 INDEX={i} TRANSMIT=0
             {% endif %}
        {% endfor %}
        SET_LED LED=ccs_rgb RED={params.LED_BRIGHTNESS|float / 255} GREEN=0.0 BLUE=0.0 INDEX=75 TRANSMIT=1


[gcode_macro heating_nozzle_indicator]
# turn on RED full brightness and BLUE using a variable PWM between 0-255, turn off all other LED colors
gcode:
        RESPOND TYPE=command MSG='temp_contrl.cfg heating_nozzle_indicator  BRIGHTNESS: {params.LED_BRIGHTNESS|float / 255}'
        {% set target = (params.LED_BRIGHTNESS|float / 255) * 25 + 51 %}
        {% for i in range(51, 75) %}
            {% if i < target %}
                SET_LED LED=ccs_rgb RED=0 GREEN=0 BLUE={params.LED_BRIGHTNESS|float / 255} INDEX={i} TRANSMIT=0
            {% else %}
                SET_LED LED=ccs_rgb RED=0 GREEN=0 BLUE=0 INDEX={i} TRANSMIT=0
            {% endif %}
        {% endfor %}
        SET_LED LED=ccs_rgb RED=0.0 GREEN=0.0 BLUE={params.LED_BRIGHTNESS|float / 255} INDEX=75 TRANSMIT=1

[gcode_macro finished_indicator]
gcode:
        RESPOND TYPE=command MSG='temp_contrl.cfg finished_indicator'
        {% for i in range(51, 75) %}
            SET_LED LED=ccs_rgb RED=0 GREEN=1.0 BLUE=0 INDEX={i} TRANSMIT=0
        {% endfor %}
        SET_LED LED=ccs_rgb RED=0.0 GREEN=1.0 BLUE=0.0 INDEX=75 TRANSMIT=1

[gcode_macro failed_indicator]
gcode:
        RESPOND TYPE=command MSG='temp_contrl.cfg finished_indicator'
        {% for i in range(51, 75) %}
            SET_LED LED=ccs_rgb RED=1.0 GREEN=0.0 BLUE=0.0 INDEX={i} TRANSMIT=0
        {% endfor %}
        SET_LED LED=ccs_rgb RED=1.0 GREEN=0.0 BLUE=0.0 INDEX=75 TRANSMIT=1


[gcode_macro clear_indicator]
gcode:
        RESPOND TYPE=command MSG='temp_contrl.cfg finished_indicator'
        {% for i in range(51, 75) %}
            SET_LED LED=ccs_rgb RED=0.0 GREEN=0.0 BLUE=0.0 INDEX={i} TRANSMIT=0
        {% endfor %}
        SET_LED LED=ccs_rgb RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=75 TRANSMIT=1


[delayed_gcode pre_heat_bed]
gcode:
        DUMP_VARIABLES
        RESPOND TYPE=command MSG='temp_contrl.cfg pre_heat_bed  TEMP: {printer.heater_bed.temperature|int}  TARGET: {printer.heater_bed.target|int}  BRIGHTNESS: {printer.heater_bed.temperature|int / printer.heater_bed.target|int * 255}'
        # Update bed indicator LEDs until temparture reached (PWM value from 0 to 255)
        {% if (printer.heater_bed.temperature|int) < (printer.heater_bed.target|int) %}
                heating_bed_indicator LED_BRIGHTNESS={printer.heater_bed.temperature|int / printer.heater_bed.target|int * 255}
                UPDATE_DELAYED_GCODE ID=pre_heat_bed DURATION=2
        {% else %}
                RESPOND TYPE=error MSG='temp_contrl.cfg pre_heat_bed - FINISHED1!'
                # Notify when bed is at target temperature
                {printer.gcode.action_respond_info(
                        "Bed Heating Finished")}
                # Set nozzle target temperature
                M104 S{ printer["gcode_macro pre_printing_sequence"].nozzle_temp|int}
                STATUS_BAR
                # Start nozzle heating sequence
                UPDATE_DELAYED_GCODE ID=pre_heat_nozzle DURATION=1
                # Stop updating bed heating indicator LEDs
                UPDATE_DELAYED_GCODE ID=pre_heat_bed DURATION=0
        {% endif %}
        RESPOND TYPE=command MSG='temp_contrl.cfg pre_heat_bed done with loop'


[delayed_gcode pre_heat_nozzle]
gcode:
        RESPOND TYPE=command MSG='temp_contrl.cfg pre_heat_nozzle  TEMP: {printer.extruder0.temperature|int}  TARGET: {printer.extruder0.target|int}  BRIGHTNESS: {printer.extruder0.temperature|int / printer.extruder0.target|int * 255}'
        # Update nozzle indicator LEDs until temparture reached (PWM value from 0 to 255)
        {% if (printer['extruder'].temperature|int) < (printer['extruder'].target|int) %}
                heating_nozzle_indicator LED_BRIGHTNESS={printer['extruder'].temperature|int / printer['extruder'].target|int * 255}
                UPDATE_DELAYED_GCODE ID=pre_heat_nozzle DURATION=1
        {% else %}
                RESPOND TYPE=error MSG='temp_contrl.cfg pre_heat_bed - FINISHED2!'
                # Notify when nozzle is at target temperature
                {printer.gcode.action_respond_info(
                        "Nozzle Heating Finished")}
                STATUS_BAR
                # Start purge line sequence indicator
                purge_sequence_indicator
                # Start purge line printing sequence
                purge_sequence
                # Stop updating nozzle heating indicator LEDs
                UPDATE_DELAYED_GCODE ID=pre_heat_nozzle DURATION=0
        {% endif %}
        RESPOND TYPE=command MSG='temp_contrl.cfg pre_heat_nozzle done with loop'


[gcode_macro pre_printing_sequence]
variable_nozzle_temp: 0
gcode:
        RESPOND TYPE=command MSG='temp_contrl.cfg pre_printing_sequence'
        # Home all
        G28
        # Set bed target temperature
        M140 S{params.TARGET_TEMP_BED|int}
        # store nozzle temp variable for later
        SET_GCODE_VARIABLE MACRO=pre_printing_sequence VARIABLE=nozzle_temp VALUE={params.TARGET_TEMP_NOZZLE}
        # Start bed heating sequence
        UPDATE_DELAYED_GCODE ID=pre_heat_bed DURATION=1

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}